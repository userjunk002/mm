def helper(X):
    return round((0.02424*(X/303.16)**1.27591),4)

n = 18

y = [[0 for i in range(n)]
		for j in range(n)];
x = [];
actualY=[]
toPlot=[0.024,0.035,0.046,0.058,0.067,0.083,0.097,0.111,0.125,0.140,0.155,0.170,0.186,0.202,0.219,0.235,0.252,0.269]
for i in range(n):
    a=300+i*100
    x.append(a)
    actualY.append(helper(a))
    y[i][0]=actualY[i]

# y[0][0] = 19;
# y[1][0] = 57;

# Calculating the forward difference
# table
for i in range(1, n):
	for j in range(n - i):
		y[j][i] = y[j + 1][i - 1] - y[j][i - 1];

for i in range(n):
	print(x[i], end = "\t");
	for j in range(n - i):
		print(y[i][j], end = "\t");
	print("");

predictionList=[]
errorList=[]
for j in range(n):
    value = x[j];
    sum = y[0][0];
    u = (value - x[0]) / (x[1] - x[0]);
    for i in range(1,n):
    	sum = sum + (u_cal(u, i) * y[0][i]) / fact(i);
    p1=round(sum, 6)
    # print("\nValue at", value,"is", p1);
    predictionList.append(p1)
    errorList.append(p1-y[j][0])

print("The predictions are",predictionList)
print("The error is ",errorList)
plt.plot(x,predictionList,color="blue")
plt.plot(x,errorList,color="green")
plt.scatter(x,actualY,color="red")
plt.legend(['prediction','error','actual'])
plt.title("prediction and actual in Newton forward")
plt.xlabel("Speed")
plt.ylabel("Distance")
plt.show()
print(stats.ttest_ind(a=np.array(toPlot), b=np.array(predictionList), equal_var=True))

